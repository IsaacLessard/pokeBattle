#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('pokemon_battle:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var io = require('socket.io')(server);
var roomInit = "Room: ";
var clientCount = 1;
var roomNumber = 0;
var roomName;
io.on('connection', function(socket){
  socket.on('disconnect', function() {
    console.log('Disconnect: decrementing ',roomNumber, " to ", roomNumber - 1)
    roomNumber = roomNumber - 1
    clientCount= clientCount - 1
    if (roomNumber < 1) {
      roomNumber = 0
      console.log('reset roomNum')
    }
    if (clientCount < 1) {
      clientCount = 1
      console.log('reset clientCount')
    }
  })
  socket.on('lobby', function(pokemon) {
    console.log("in Lobby")
      console.log('Connection - roomNum is ', roomNumber)
    clientCount++
    if (clientCount % 2 === 0) {
      roomNumber++
      console.log('room is now ', roomNumber)
    }
    roomName = roomInit + roomNumber
    console.log("Joining client ", clientCount, " to ", roomName)
    socket.join(roomName);
    socket.emit('lobby', roomName);
  });

  socket.on('game', function(info) {
    socket.broadcast.to(info.room).emit('game', info.pokemon);
  });

  socket.on('attack', function(actionInfo) {
    socket.broadcast.to(actionInfo.room).emit('attack', actionInfo.victim);
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
